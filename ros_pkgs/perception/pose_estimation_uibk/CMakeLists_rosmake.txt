cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

find_package(VTK REQUIRED)
include_directories(${VTK_INCLUDE_DIRS})

#needed by online_local_recognition_pose
#include_directories($HOME/fuerte_workspace/perception_pcl_unstable/pcl17/build/pcl_trunk/recognition/include)
#include_directories($HOME/fuerte_workspace/perception_pcl_unstable/pcl17/build/pcl_trunk/apps/3d_rec_framework/include)
#include_directories($HOME/fuerte_workspace/perception_pcl_unstable/pcl17/build/pcl_trunk/apps/include)
#include_directories($HOME/fuerte_workspace/pcl/perception_pcl_unstable/pcl17/build/pcl_trunk/recognition/include)
#include_directories($HOME/fuere_workspace/pcl/perception_pcl_unstable/pcl17/build/pcl_trunk/apps/3d_rec_framework/include)
#include_directories($HOME/fuerte_workspace/pcl/perception_pcl_unstable/pcl17/build/pcl_trunk/apps/include)
include_directories(/usr/local/src/pcl_ros-fuerte-unstable/pcl17/build/pcl_trunk/recognition/include)
include_directories(/usr/include/ni)

find_package(Eigen REQUIRED)
include_directories(${EIGEN_INCLUDE_DIRS})


#uncomment if you have defined messages
#rosbuild_genmsg()
#uncomment if you have defined services

rosbuild_gensrv()

#common commands for building c++ executables and libraries
#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
#target_link_libraries(${PROJECT_NAME} another_library)
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
#rosbuild_add_executable(example examples/example.cpp)
#target_link_libraries(example ${PROJECT_NAME})


rosbuild_add_boost_directories()

rosbuild_add_executable(pacman_pose_estimation include/pacman_pose_estimation/ParametersPoseEstimation.cpp include/pacman_pose_estimation/I_SegmentedObjects.cpp src/pose_estimation_service.cpp )

rosbuild_add_executable(execution_control include/pacman_pose_estimation/ParametersPoseEstimation.cpp include/pacman_pose_estimation/I_SegmentedObjects.cpp src/execution_control.cpp )

rosbuild_link_boost(pacman_pose_estimation filesystem system)
rosbuild_link_boost(execution_control filesystem system)

target_link_libraries(pacman_pose_estimation ${VTK_LIBRARIES})
target_link_libraries(execution_control ${VTK_LIBRARIES})

#get_property(inc_dirs DIRECTORY PROPERTY INCLUDE_DIRECTORIES)
#message("inc_dirs = ${inc_dirs}")
